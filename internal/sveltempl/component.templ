package sveltempl

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"rogchap.com/v8go"
	"sveltempl/internal/codegen"
)

type Options map[string]any

// Mutable var for storing the current id
// (gets updated on each top-level component wrapper, then passed in to internals)
var idGlobal string

func setAndReturnUniqId() string {
	idGlobal = uuid.NewString()
	return idGlobal
}

templ Component(componentName string, componentProps []byte, opts ...Options) {
	<div style="display: contents" id={ componentName + "-" + setAndReturnUniqId() }>
		@svelTemplComponent(GetV8Context(ctx), componentName, idGlobal, componentProps, opts...)
	</div>
}

func svelTemplComponent(iso *v8go.Isolate, componentName string, internalId string, componentProps []byte, opts ...Options) templ.Component {
	var htmlOutput string
	var err error

	mode := "ssr"
	for _, o := range opts {
		if m, exists := o["mode"]; exists {
			if modeStr, ok := m.(string); ok {
				mode = modeStr
			}
		}
	}

	if mode == "ssr" {
		htmlOutput, err = svelTemplRenderToString(componentName, iso, componentProps)
	} else {
		htmlOutput = ""
	}

	if err != nil {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := io.WriteString(w, "<p style='color: red'>"+err.Error()+"</p>")
			return err
		})
	}

	propScript := ""
	if componentProps != nil {
		propScript = `<script type="application/json">` + string(componentProps) + "</script>\n"
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, propScript+htmlOutput+hydrationScript(componentName, internalId, mode))
		return err
	})
}

// TODO most of this can be re-used, the only dynamic part is getting the Component class and target element
func hydrationScript(componentName string, internalId string, mode string) string {
	csrPath := codegen.ComponentMap[componentName]

	if os.Getenv("SVELTEMPL_HMR") != "" {
		csrPath = "http://localhost:5173/src/" + componentName + ".svelte"
	}

	return fmt.Sprintf(`
		<script type="module">
			import("%s").then((module) => {
				const Component = module.default;
				const target = document.getElementById("%s-%s");

				let props = {};

				if (target.firstElementChild?.tagName === "SCRIPT") {
					props = JSON.parse(target.firstElementChild.textContent ?? "{}");
					props.mode = "%s";
				}

				target.innerHTML = "";

				new Component({
					target,
					props,
				});
			})
		</script>
	`, csrPath, componentName, internalId, mode)
}

// ? componentQualName includes leading path info relative to svelte/src
func svelTemplRenderToString(componentQualName string, iso *v8go.Isolate, componentProps []byte) (string, error) {
	// Create a new Javascript context
	ctx := v8go.NewContext(iso)

	if componentQualName == "" {
		return "", fmt.Errorf("you must pass in a component name to render")
	}

	componentName := path.Base(componentQualName)

	// Construct the file path using fmt.Sprintf for string interpolation
	cwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("Failed to get current working directory: %v", err)
	}
	componentPath := filepath.Join(cwd, "svelte/dist/ssr-go", fmt.Sprintf("%s.js", componentQualName))

	// Read the JavaScript file from disk
	componentScript, err := os.ReadFile(componentPath)
	if err != nil {
		return "", fmt.Errorf("could not read JavaScript file %s", componentPath)
	}

	// Run the JS file which will load it into context
	_, err = ctx.RunScript(string(componentScript), componentPath)
	if err != nil {
		return "", fmt.Errorf("error executing JavaScript file %s", componentPath)
	}

	// Handle props
	var propsJson string
	switch {
	case componentProps == nil:
		propsJson = "{}"
	case !json.Valid(componentProps):
		return "", fmt.Errorf("props must be valid json")
	default:
		propsJson = string(componentProps)
	}

	_, err = ctx.RunScript(fmt.Sprintf(`const props = {server: true, ...JSON.parse('%s')};`, propsJson), "props.js")
	if err != nil {
		return "", fmt.Errorf("error parsing props")
	}

	// Run the component render method
	componentOutput, err := ctx.RunScript(fmt.Sprintf(`
		const { html, css: { code: css } } = %s.render(props);
		(html + "<style>" + css + "</style>")
	`, componentName), "output.js") // return a value in JavaScript back to Go
	if err != nil {
		return "", fmt.Errorf("error executing JavaScript function")
	}

	return componentOutput.String(), nil
}
